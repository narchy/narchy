//   see:
//      https://en.wikipedia.org/wiki/Fluid_Concepts_and_Creative_Analogies
//      https://cogsci.indiana.edu/

////// samilarity-based syllogism ////////////////////////////////////////////////////////////////////////////////////
// if editing, ensure Dynsam.java behavior is consistent with these:

sam_induction_any {
     X, Y, --var({X,Y}), --seq(X), --seq(Y), --is(X,"==>"), --is(Y,"==>"), hasBelief(), task("."), --overlap() |-   (X<~>Y),  (Belief:Dynamic, Time:Intersection)
}

//sam_transitive_induction {
//    (M <~> X), (M <~> Y), --var({M,X,Y}), neqRCom(X,Y), hasBelief(), task("."), --overlap() |-  (X <~> Y), (Belief:Dynamic, Time:Intersection)
//}


//TODO_sam_decompose_conditional {
//      S, (S <~> P), --var(P)  |-  P, (Belief:PolarductWeak, Time:Task)
//        //S, (Z <~> P), --var({Z,P})  |-  unisubst(P, S, Z, "$"), (Belief:PolarductWeak, Time:Task)
//
//      (S <~> P), S, --var(P)  |-  P, (Belief:PolarductWeakX, Time:Belief)
//        //(Z <~> P), S, --var({Z,P})  |-  unisubst(P, S, Z, "$"), (Belief:PolarductWeakX, Time:Task)
//}

//--------------------------

//sam_induction_heterarchical {
//     //heterarchical (siblings)
//     //  option? neq(X,Y), neqRCom(X,Y)
//     (A --> X), (A --> Y), --var({A,X,Y}), neq(X,Y) |-   debug(((A-->X) <~> (A-->Y))),  (Belief:Diff, Time:Union)
//     (X --> A), (Y --> A), --var({A,X,Y}), neq(X,Y) |-   debug(((X-->A) <~> (Y-->A))),  (Belief:Diff, Time:Union)
//}

//sam_induction_hierarchical {
//     (A --> X), (Y --> A), --var({A,X,Y}), neq(X,Y) |-   ((A-->X) <~> (Y-->A)),  (Belief:Diff, Time:Union)
//     (X --> A), (A --> Y), --var({A,X,Y}), neq(X,Y) |-   ((X-->A) <~> (A-->Y)),  (Belief:Diff, Time:Union)
//}

//sam_induction_inner {
//    //'samilar to' classic NARS samilarity
//     (Y --> X), (X --> Y), --var({X,Y}) |-   (X <~> Y),  (Belief:Diff, Time:Union)
//}

//sam_induction_self {
//     (A --> X), (X --> A), --var({A,X}) |-   ((A-->X) <~> (X-->A)),  (Belief:Diff, Time:Union)
//}

//sam_induction_recursive {
//     //recursive transitive
//     (A <~> X), (A <~> Y), --var({A,X,Y}), neqRCom(X,Y) |-   ((A<~>X) <~> (A<~>Y)),  (Belief:Diff, Time:Union)
//}

//     //gate
//     ((A --> X)<~>(A --> Y)), (A --> Z), --var({A,X,Y}), neqRCom(X,Z), neqRCom(Y,Z) |-   (((A --> X)<~>(A --> Y))<~>(A-->Z)),  (Belief:Diff)
//     ((X --> A)<~>(Y --> A)), (Z --> A), --var({A,X,Y}), neqRCom(X,Z), neqRCom(Y,Z) |-   (((X --> A)<~>(Y --> A))<~>(Z-->A)),  (Belief:Diff)


//sam_inh_symmetric_induction {
//    (S --> P), (P --> S), --var({S,P}) |-   (S <~> P), (Belief:Diff)
//}

//sam_question_decompose {
//    (S <~> P), P |- (S --> P), (Punctuation:AskAsk)
//}
//sam_commutive_compose_question {
//      (S --> P), (P --> S)   |- (S <~> P), (Punctuation:AskAsk)
//}




//sam_inh_symmetric_conditional {
//      (S --> P), (S <~> P), --var({S,P})  |-   (P --> S), (Belief:PolarductWeak, Time:Task)
//      (S <~> P), (S --> P), --var({S,P})  |-   (P --> S), (Belief:PolarductWeakX, Time:Belief)
//}


//analogy_classic {
////#R[(M --> P) (S <~> M) |- (S --> P) :pre ((:!= S P)) :post (:t/analogy :d/strong :allow-backward)]
////#R[(P --> M) (S <~> M) |- (P --> S) :pre ((:!= S P)) :post (:t/analogy :d/strong :allow-backward)]
//    (M-->P),(S<~>M),--var({M,S,P}) |- (S-->P), (Belief:Polarduct, Time:Task)
//      (S<~>M), (M-->P),--var({M,S,P}) |- (S-->P), (Belief:PolarductX, Time:Belief)
//    (P-->M),(S<~>M),--var({M,S,P}) |- (P-->S), (Belief:Polarduct, Time:Task)
//      (S<~>M), (P-->M),--var({M,S,P}) |- (P-->S), (Belief:PolarductX, Time:Belief)
//
////    (S --> B), (A <~> P), ceq(A,B), --var({S,P}) |-  (S --> P), (Punctuation:AskAsk)
////    (B --> S), (A <~> P), ceq(A,B), --var({S,P}) |-  (P --> S), (Punctuation:AskAsk)
//
//}



sam_transitive_ask {
  (S <~> B), (A <~> P), ceqPN(A,B), --var({S,P,A,B}), hasBelief(), --taskBeliefEq() |-  (S <~> P), (Punctuation:AskAsk)
//    (A <~> P), (S <~> B), ceq(A,B) |-  (S <~> P), (Punctuation:AskAsk)

//  (A <~> P), (S --> B), ceqPN(A,B), --var({S,P,A,B}), hasBelief() |-  (S <~> P), (Punctuation:AskAsk)
//    //(A <~> P), (S --> B), ceq(A,B), --var({S,P})   |-  (S --> P), (Punctuation:AskAsk)
//  (A <~> P), (B --> S), ceqPN(A,B), --var({S,P,A,B}), hasBelief() |-  (S <~> P), (Punctuation:AskAsk)
//    //(A <~> P), (B --> S), ceq(A,B), --var({S,P})   |-  (P --> S), (Punctuation:AskAsk)

}

//what_difference_does_it_make {
//    (X <~> Y), (X <~> Z), neq(Y,Z), --var({X,Y,Z}) |- (X <~> (  Y & --Z)), (Punctuation:Ask)
//    (X <~> Y), (X <~> Z), neq(Y,Z), --var({X,Y,Z}) |- (X <~> (--Y &   Z)), (Punctuation:Ask)
//}


//
//      (P --> M), (S <~> M), hasBelief() |- (P --> S), (Punctuation:AskAsk)
//      (M --> P), (S <~> M), hasBelief() |- (S --> P), (Punctuation:AskAsk)
//
//      (S <~> M), (P --> M), hasBelief() |- (P --> S), (Punctuation:AskAsk)
//      (S <~> M), (M --> P), hasBelief() |- (S --> P), (Punctuation:AskAsk)
//}


//sam_decompose_free {
//    (S <~> P), P  |-    (S --> P), (Belief:StructuralDeduction, Goal:StructuralDeduction)
//    //(S <~> P), P  |-  --(S --> P), (Goal:StructuralDeductionNP)
//      //(S <~> P), P  |- (S --> P), (Goal:StructuralReduction)
//}


//sam_belief_decompose_passive {
//    (S --> P), (S <~> P), task("?") |- (S --> P), (Belief:BeliefStructuralReduction, Punctuation:Belief, Time:Belief)
//    (S --> P), (S <~> P), task("?") |- (S --> P), (Belief:BeliefSymmetricReduction, Punctuation:Belief, Time:Belief)
//}

//inner_analogy {
//    ((X-->A)-->(X-->B)), ((X-->A)-->(X-->B)), --var(X)  |- (A-->B), (Belief:StructuralReduction)
//    ((A-->X)-->(B-->X)), ((X-->A)-->(X-->B)), --var(X)  |- (A-->B), (Belief:StructuralReduction)
//    //((A-->X)-->(X-->B)), ((A-->X)-->(X-->B)), --var(X)  |- (A-->B), (Belief:StructuralReduction, Goal:StructuralReduction)
//}



//sam_transitive_decompose {
//    (S <~> M), (M <~> P) |- (S <~> P), (Belief:DividePP)
//    //reduce conjunction?
//}






//sam_equivalence {
//    //HOL 6 to 3
//    //x ==> y && y ==> x |- (x<=>y) ~= (x<~>y)
//        (X==>Y), (Y==>X), neq(X,Y), hasBelief() |- (X<~>Y), (Punctuation:Ask)
//    //        (X==>Y), (Y==>X), neq(X,Y) |- (X<~>Y), (Belief:DeductionPP)
//    //      (--X==>Y), (Y==>X) |- (X <~> Y), (Belief:DeductionPN)
//    //      (X==>Y), (--Y==>X) |- (X <~> Y), (Belief:DeductionNP)
//    //    (--X==>Y), (--Y==>X) |- (X <~> Y), (Belief:DeductionNN)
//}






//analogy_structural_transpose {
//      ((A-->B) <~> (A-->C)), ((A-->B) <~> (A-->C)) |- (A --> (B <~> C)), (Belief:StructuralDeductionWeak)
//      ((B-->A) <~> (C-->A)), ((B-->A) <~> (C-->A)) |- ((B <~> C) --> A), (Belief:StructuralDeductionWeak)
//      ((A-->B) <~> (A-->C)), ((A-->B) <~> (A-->C)), hasBelief() |- (A --> (B <~> C)), (Punctuation:AskAsk)
//      ((B-->A) <~> (C-->A)), ((B-->A) <~> (C-->A)), hasBelief() |- ((B <~> C) --> A), (Punctuation:AskAsk)
//}
//analogy_inh_expand {
//      (X --> Y), (X --> Y), --var(X), --var(Y)     |-   (( X --> $Z) --> (Y  --> $Z)), (Punctuation:Ask)
//      (X --> Y), (X --> Y), --var(X), --var(Y)     |-   (($Z -->  X) --> ($Z -->  Y)), (Punctuation:Ask)
//        (X --> Y), (X --> Y), --var(X), --var(Y)   |-   (( X --> $Z) --> ($Z -->  Y)), (Punctuation:Ask)
//        (X --> Y), (X --> Y), --var(X), --var(Y)   |-   (($Z -->  X) --> (Y  --> $Z)), (Punctuation:Ask)
//          //(X --> Y), (X --> Y), --var(X), --var(Y) |-   (($Z <~>  X) --> ($Z <~>  Y)), (Punctuation:Ask)
//}
//analogy_impl_expand {
//      (X ==> Y), (X ==> Y), --var(X), --var(Y)     |-   (( X --> $Z) ==> (Y  --> $Z)), (Punctuation:Ask)
//      (X ==> Y), (X ==> Y), --var(X), --var(Y)     |-   (($Z -->  X) ==> ($Z -->  Y)), (Punctuation:Ask)
//        (X ==> Y), (X ==> Y), --var(X), --var(Y)   |-   (( X --> $Z) ==> ($Z -->  Y)), (Punctuation:Ask)
//        (X ==> Y), (X ==> Y), --var(X), --var(Y)   |-   (($Z -->  X) ==> (Y  --> $Z)), (Punctuation:Ask)
//          //(X ==> Y), (X ==> Y), --var(X), --var(Y) |-   (($Z <~>  X) ==> ($Z <~>  Y)), (Punctuation:Ask)
//}

//analogy_transform_subst_reverse {
//    Z, (X <~> Y), neq(Z,Y), --var(X), --var(Y), hasBelief()  |-   unisubst(Y, X, Z, "$"), (Punctuation:AskAll)
//}


//analogy_subst2 {
//maybe applicable if impl dt is parallel, otherwise there is too much potential variation across all applied temporal impl beliefs
//    Z, (X ==> Y), --var(X), --var(Y), in(Z,X), neq(Z,Y), --eqPN(X,Y)  |- substitute(Z, X,   Y, novel), (Belief:ConductWeakPP)
//    Z, (X ==> Y), --var(X), --var(Y), in(Z,X), neq(Z,Y), --eqPN(X,Y)  |- substitute(Z, X, --Y, novel), (Belief:ConductWeakPN)
//      Z, (X ==> Y), --var(X), --var(Y), in(Z,X), neq(Z,Y), --eqPN(X,Y), hasBelief()  |- substitute(Z, X, polarizeBelief(Y), novel), (Punctuation:AskAsk)
//}

//samilarity_razor {
//    //nal3 difference question formation from samilarity with respect to A (subj and pred forms)
//
//    (X<~>Y), (A-->X), neq(A,Y), hasBelief() |- (A-->(X & --Y)), (Punctuation:Ask)
//    (X<~>Y), (A-->X), neq(A,Y), hasBelief() |- (A-->(--X & Y)), (Punctuation:Ask)
//
//    (X<~>Y), (X-->A), neq(A,Y), hasBelief() |- ((X & --Y)-->A), (Punctuation:Ask)
//    (X<~>Y), (X-->A), neq(A,Y), hasBelief() |- ((--X & Y)-->A), (Punctuation:Ask)
//}

//sam_to_impl_question {
//    (X<~>Y), Y, task(".!") |- (polarizeTask(X) ==> Y), (Punctuation:Question)
//    (X<~>Y), Y, task(".!") |- (polarizeTask(($1-->X)) ==> ($1-->Y)), (Punctuation:Question)
//    (X<~>Y), Y, task(".!") |- (polarizeTask((X-->$1)) ==> (Y-->$1)), (Punctuation:Question)
//}

//impl_question_to_sam {
//    (X==>Z), (Y==>Z), task("."), neqPN(X,Y), hasBelief() |- (X <~> Y), (Punctuation:Question)
//    (Z==>X), (Z==>Y), task("."), neqPN(X,Y), hasBelief() |- (X <~> Y), (Punctuation:Question)
//}

//conjunctionsamilarityQuestion {
//    A, B, eventCommon(A,B), neq(A,B), hasBelief() |- (A<~>B), (Punctuation:Ask)
//}

//
//
//analogy_rewrite_impl {
     //Z, (X ==> Y), in(Z,X), neq(Z,Y), hasBelief()                                |- substitute(Z, X, polarizeBelief(Y), novel), (Punctuation:AskAll)
//     Z, (X ==> Y), in(Z,X), neq(X,Y), neq(Z,Y), hasBelief()   |- substitute(Z, X, polarizeBelief(Y), novel), (Punctuation:Ask)
//     //Z, (X ==> Y), in(Z,X), neq(X,Y), neq(Z,Y)   |- substitute(Z, X, polarizeBelief(Y), novel), (Belief:ConductWeakPD, Goal:ConductWeakPD)
//}

//analogy_rewrite_sam {
//     Z, (X <~> Y), in(Z,  X), neq(X,Y), neq(Z,Y) |- substitute(Z,   X,   Y, novel), (Belief:ConductWeakPP, Goal:ConductWeakPP)
//     Z, (X <~> Y), in(Z,--X), neq(X,Y), neq(Z,Y) |- substitute(Z, --X, --Y, novel), (Belief:ConductWeakPP, Goal:ConductWeakPP)
//     //Z, (X <~> Y), in(Z,X), neq(Z,Y)   |- substitute(Z, X,   Y, "$", novel), (Belief:ConductWeakPP, Goal:ConductWeakPP)
//     //Z, (X <~> Y), in(Z,X), neq(Z,Y)   |- substitute(Z, X, --Y, "$", novel), (Belief:ConductWeakPN, Goal:ConductWeakPN)
//}





    //X, (X <~> Y), --var(Y)                      |-   Y, (Punctuation:AskAll)
    //  X, (X <~> Y), --var(Y)                    |-   Y, (Belief:ConductPP, Goal:ConductPP)

//analogy_transform_impl {
// //possibly applied entirely by analogy_transform_subst
//            (A ==> X), (X <~> Y), --var(X), --var(Y)    |- (A ==> Y),       (Belief:ConductWeakPP)
//    (  X ==> A),       (X <~> Y), --var(X), --var(Y)    |-     (  Y ==> A), (Belief:ConductWeakPP)
//    (--X ==> A),       (X <~> Y), --var(X), --var(Y)    |-     (--Y ==> A), (Belief:ConductWeakPP)
//
//}

//chain:
//  (&&,  (X<~>Y),A..+), (X<~>Y)         |- substitute((&&,A..+),X,Y,novel), (Belief:StructuralReduction, Goal:StructuralReductionRel)
//    (&&,--(X<~>Y),A..+), (X<~>Y)         |- substitute((&&,A..+),X,--Y,novel), (Belief:StructuralReduction, Goal:StructuralReductionRel)
//    (&&,--(X<~>Y),A..+), (X<~>Y)         |- substitute((&&,A..+),--X,Y,novel), (Belief:StructuralReduction, Goal:StructuralReductionRel)

//these would only be valid if =|> but not ==>+...
//  (&&,  (X==>Y),A..+), (X<~>Y)         |- substitute((&&,A..+),X,Y,novel), (Belief:StructuralReduction, Goal:StructuralReductionRel)
//    (&&,--(X==>Y),A..+), (X<~>Y)         |- substitute((&&,A..+),X,--Y,novel), (Belief:StructuralReduction, Goal:StructuralReductionRel)
//    (&&,--(X==>Y),A..+), (X<~>Y)         |- substitute((&&,A..+),--X,Y,novel), (Belief:StructuralReduction, Goal:StructuralReductionRel)




//    X, (  X --> Y)                        |- Y, (Goal:ConductWeak)
//    X, (--X --> Y)                     |- Y, (Goal:ConductWeakN)
//        (X --> Y), X                         |- Y, (Goal:ConductWeak)
//                                                            //DesireWeakN
//        (--X --> Y), X                         |- Y, (Goal:ConductWeakPN)
//                                                            //DesireWeakNN
//    X, (Y -->   X)                        |- Y, (Goal:ConductWeak)
//    X, (Y --> --X)                     |- Y, (Goal:ConductWeakN)
//        (Y --> X), X                         |- Y, (Goal:ConductWeak)
//                                                           //DesireWeakN
//        (Y --> --X), X                         |- Y, (Goal:ConductWeakPN)
//                                                           //DesireWeakNN




  //(M --> P), (S <~> M) |- (S --> P), (Belief:Conduct, Goal:Conduct)
  //(P --> M), (S <~> M) |- (P --> S), (Belief:Conduct, Goal:Conduct)

  //wantX and X samilar Y then want Y
    //X, (X<~>Y)                          |- Y, (Belief:Conduct, Goal:Conduct)
    //Z, (X<~>Y), in(Z,X), neq(Z,X), neq(Z,Y)  |- unisubst(Z, X, Y, novel), (Belief:Conduct, Goal:Weak)

  //notWantX and notX samilar Y then want Y

  //want/notWant X,  and not X samilar Y then not/want Y
    //X, (X<~>Y)                          |- --Y, (Goal:WeakPN)
    //X, (--X<~>Y)                        |- --Y, (Goal:WeakNN)


    //Z, (X<~>Y), inNeg(Z,X)             |- unisubst(Z, X, Y, novel, force), (Belief:ConductN, Goal:WeakN)
    //Z, (X<~>Y), neq(Z,X), neq(Z,Y)    |- unisubst(Y, --X, Z, novel), (Belief:ConductN, Goal:WeakN)
      //X, (X<~>Y)                 |- (--,Y), (Goal:WeakPN)
      //X, (--X<~>Y)               |- (--,Y), (Goal:WeakNN)
      //(X-->A), (($1-->A)<~>($1-->B)), neqRCom(X,B) |- (X-->B), (Belief:Conduct, Goal:Induction)

//samilarity in Conjunction spreading
 //   (&&,(X<~>Y),A..+), (Y<~>Z), neqRCom(X,Z) |- (&&,(X<~>Z),A..+), (Belief:Conduct, Goal:Weak)
 //   (&&,--(X<~>Y),A..+), (Y<~>Z), neqRCom(X,Z) |- (&&,--(X<~>Z),A..+), (Belief:Conduct, Goal:Weak)
    //TODO (&&,(X<~>Y),A..+), (&&,(Y<~>Z),A..+), neq(X,Z) |- (&&,(X<~>Z),A..+), (Belief:...

 //suspect:
// Z, (X<~>Y), eqOrIn(X,Z), belief(negative)   |- (--, unisubst(Z, X, Y, novel, force)), (Belief:ConductPN, Goal:WeakPN)
//Z, (--X<~>Y), eqOrIn(X,Z), belief(positive) |- unisubst(Z, X, Y, novel, force), (Belief:ConductN, Goal:WeakN)
 //Z, (--X<~>Y), eqOrIn(X,Z), belief(negative) |- (--, unisubst(Z, X, Y, novel, force)), (Belief:ConductNN, Goal:WeakNN)

//these old rules are replaced by the above rules:
        //If M is a special case of P and S and M are samilar, then S is also a special case of P (strong)

            //(M --> P), (S <~> M) |- (S --> P), (Belief:Conduct, Goal:Conduct)
                    //TODO write test case for this
            //(P --> M), (S <~> M) |- (P --> S), (Belief:Conduct, Goal:Conduct)
                    //TODO write test case for this
            //variable elimination 4b:

        //    (X --> A),        ((Y --> A)<~>(Y --> C)),  neqRCom(X,C), neq(X,Y)      |- (X-->C), (Belief:Conduct, Goal:Conduct)
         //       (X --> A),  (--(Y --> A)<~>(Y --> C)),  neqRCom(X,C), neq(X,Y)      |- (X-->C), (Belief:ConductN, Goal:ConductN)
          //  (A --> X),        ((A --> Y)<~>(C --> Y)),  neqRCom(X,C), neq(X,Y)      |- (C-->X), (Belief:Conduct, Goal:Conduct)
          //      (A --> X),  (--(A --> Y)<~>(C --> Y)),  neqRCom(X,C), neq(X,Y)      |- (C-->X), (Belief:ConductN, Goal:ConductN)

//full-spectrum:
//      S, (Z <~> P), --var({Z,P})  |-    unisubst(P, S, Z), (Belief:ConductWeakPP,  Time:Task)
//      S, (Z <~> P), --var({Z,P})  |-  --unisubst(P, S, Z), (Belief:ConductWeakPN,  Time:Task)
//      (Z <~> P), S, --var({Z,P})  |-    unisubst(P, S, Z), (Belief:ConductWeakPPX, Time:Belief)
//      (Z <~> P), S, --var({Z,P})  |-  --unisubst(P, S, Z), (Belief:ConductWeakNPX, Time:Belief)

//      S, (S <~> P), --var({S,P})  |-   P, (Belief:PolarductWeak, Time:Task)
//      (S <~> P), S, --var({S,P})  |-   P, (Belief:PolarductWeakX, Time:Belief)

//      (S --> P), (S <~> P), --var({S,P})  |-   (P --> S), (Belief:Polarduct, Time:Task)
//      (S <~> P), (S --> P), --var({S,P})  |-   (P --> S), (Belief:PolarductX, Time:Belief)

//      (S --> P), (S <~> P), --var({S,P})  |-   (P --> S), (Belief:ConductPP, Time:Task)
//       (S --> P), (S <~> P), --var({S,P}) |- --(P --> S), (Belief:ConductPN, Time:Task)
//      (S <~> P), (S --> P), --var({S,P})  |-   (P --> S), (Belief:ConductPPX, Time:Belief)
//       (S <~> P), (S --> P), --var({S,P}) |- --(P --> S), (Belief:ConductNPX, Time:Belief)

//    (S <~> P), (S --> P) |-  (P --> S), (Belief:Divide, Time:Belief)
//      (S --> P), (S <~> P) |-  (P --> S), (Belief:DivideX, Time:Task)

   //    (S <~> P), (S --> P) |-  (P --> S), (Belief:ReduceConjunction, Time:Belief)
   //      (S --> P), (S <~> P) |-  (P --> S), (Belief:ReduceConjunctionX, Time:Task)