set_compose {
    (C --> A), (C --> B), neq(A,B),is(A,"{"),opEq(A,B),--var({C}) |- (C --> intersect(A,B)), (Belief:Intersection)
    (C --> A), (C --> B), neq(A,B),is(A,"["),opEq(A,B),--var({C}) |- (C --> intersect(A,B)), (Belief:Union)
    (C --> A), (C --> B), neq(A,B),is(A,"{"),opEq(A,B),--var({C}) |- (C --> union(A,B)), (Belief:Union)
    (C --> A), (C --> B), neq(A,B),is(A,"["),opEq(A,B),--var({C}) |- (C --> union(A,B)), (Belief:Intersection)
    (C --> A), (C --> B), neq(A,B),is(A,"{"),opEq(A,B),setsIntersect(A,B),--var({C}) |- (C --> differ(A,B)), (Belief:IntersectionPN)
    (C --> A), (C --> B), neq(A,B),is(A,"{"),opEq(A,B),setsIntersect(A,B),--var({C}) |- (C --> differ(B,A)), (Belief:IntersectionNP)

    (A --> C), (B --> C), neq(A,B),is(A,"["),opEq(A,B),--var({C}) |- (intersect(A,B) --> C), (Belief:Intersection)
    (A --> C), (B --> C), neq(A,B),is(A,"{"),opEq(A,B),--var({C}) |- (intersect(A,B) --> C), (Belief:Union)
    (A --> C), (B --> C), neq(A,B),is(A,"["),opEq(A,B),--var({C}) |- (union(A,B) --> C), (Belief:Union)
    (A --> C), (B --> C), neq(A,B),is(A,"{"),opEq(A,B),--var({C}) |- (union(A,B) --> C), (Belief:Intersection)
    (A --> C), (B --> C), neq(A,B),is(A,"["),opEq(A,B),setsIntersect(A,B),--var({C}) |- (differ(A,B) --> C), (Belief:IntersectionPN)
    (A --> C), (B --> C), neq(A,B),is(A,"["),opEq(A,B),setsIntersect(A,B),--var({C}) |- (differ(B,A) --> C), (Belief:IntersectionNP)
}

//Set Goals
    //(A --> C), (B --> C), task("!"), neq(A,B),is(A,"{"),is(B,"{") |- (intersect(A,B) --> C), (Goal:Weak)
    //(A --> C), (B --> C), task("!"), neq(A,B),is(A,"["),is(B,"[") |- (union(A,B) --> C), (Goal:Weak)
    //TODO more
        //(A --> C), (B --> C), task("!"), neq(A,B),is(A,"+"),is(B,"+") |- (intersect(A,B) --> C), (Goal:Induction)
        //(A --> C), (B --> C), task("!"), neq(A,B),is(A,"+"),is(B,"+") |- (union(A,B) --> C), (Goal:Induction)